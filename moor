#!/bin/bash

# Host
BIN=~/.local/bin
MOORHOME=.moor/home
mkdir -p $HOME/$MOORHOME

# Container
WORKDIR=/workdir

HELP_HEADER_INSTALL='Make command from docker image to be available on the host'
HELP_HEADER_UPDATE='Update docker image of installed command'
HELP_HEADER_REMOVE='Remove installed host command and corresponding docker image'

function print_help_main {
    echo 'Install app from docker image to the host'
    echo
    echo 'Usage: moor COMMAND'
    echo
    echo 'Commands:'
    echo '  install   '$HELP_HEADER_INSTALL
    echo '  update    '$HELP_HEADER_UPDATE
    echo '  remove    '$HELP_HEADER_REMOVE
    echo
    echo "If no command is specified 'install' is used."
    echo "Run 'moor COMMAND --help' for more information on a command."
    exit 0
}

function print_help_install {
    echo $HELP_HEADER_INSTALL
    echo
    echo 'Usage: moor [i|in|install] image[:tag|@digest] host_cmd container_cmd'
    echo '  image           Docker image which contains required command'
    echo '  host_cmd        How to name the command on the host'
    echo '  container_cmd   Command to run in the container'
    echo
    echo 'Options:'
    echo '  --pipe          Allow installed command to accept input through pipe'
    echo '                  (docker run --tty)'
    echo '  --privileged    Give extended privileges to this container'
    echo '                  (docker run --privileged)'
    exit 0
}

function print_help_update {
    echo $HELP_HEADER_UPDATE
    echo
    echo 'Usage: moor u|up|update host_cmd'
    echo '  host_cmd   Command, which image to update'
    exit 0
}

function print_help_remove {
    echo $HELP_HEADER_REMOVE
    echo
    echo 'Usage: moor r|rm|remove host_cmd'
    echo '  host_cmd   Command to remove'
    exit 0
}

function check_help {
    ARG=$1
    COMMAND=$2
    case $ARG in
        h|-h|--help|help) print_help_$COMMAND;;
    esac
}

DEFAULT_TTY=-t
function check_option_install_pipe {
    for arg in $@; do
        if [ $arg = "--pipe" ]; then
            echo ""
            return
        fi
    done
    echo $DEFAULT_TTY
}

DEFAULT_PRIVILEGED=
function check_option_install_privileged {
    for arg in $@; do
        if [ $arg = "--privileged" ]; then
            echo $arg
            return
        fi
    done
    echo $DEFAULT_PRIVILEGED
}

function install {
    check_help $1 "install"

    TTY=$(check_option_install_pipe $@)
    PRIVILEGED=$(check_option_install_privileged $@)

    if [ "$TTY" != "$DEFAULT_TTY" ]; then shift; fi
    if [ "$PRIVILEGED" != "$DEFAULT_PRIVILEGED" ]; then shift; fi

    # there are 2 required arguments: image, host_cmd
    # and optional container_cmd, so there may be 2 or 3 args
    if [ $# -lt 2 ] || [ $# -gt 3 ]; then
        print_help_install
    fi

    IMAGEFULL=$1
    NAME=$2
    CMD=$3

    printf \
'# Generated with moor

IMAGEFULL='$IMAGEFULL'
CMD='$CMD'
WORKDIR='$WORKDIR'
MOORHOME='$MOORHOME'

docker run -i '$TTY' --rm '$PRIVILEGED' \
--network=host \
--ipc=host \
--workdir $WORKDIR \
--volume "$PWD":$WORKDIR \
--volume $HOME/$MOORHOME:$HOME \
--user $(id -u $USER):$(id -g $USER) \
--env HOME=$HOME \
$IMAGEFULL \
$CMD \
"$@"

' > $BIN/$NAME && chmod +x $BIN/$NAME
}

function get_image_full {
    # host cmd name
    name=$1
    file=$BIN/$name
    # find string containing image spec
    image_full_spec=`grep IMAGEFULL= $file`
    # parse image spec string to get image
    IFS='=' read -ra image_full_split <<< "$image_full_spec"
    image_full=${image_full_split[1]}
    echo $image_full
}

function update {
    check_help $1 "update"
    if [ ! $# -eq 1 ]; then
        print_help_update
    fi
    name=$1
    image=$(get_image_full $name)
    docker pull $image
}

function remove {
    check_help $1 "remove"
    if [ ! $# -eq 1 ]; then
        print_help_remove
    fi
    name=$1
    image=$(get_image_full $name)
    rm $BIN/$name
    docker rmi $image
}

check_help $1 "main"
case $1 in
    i|in|install) shift; install $@;;
    u|up|update) shift; update $@;;
    r|rm|remove|uninstall) shift; remove $@;;
    *) install $@;;
esac
