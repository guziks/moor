#!/usr/bin/env bash

# where to put generated launchers
if [ -z $MOORBIN ]; then
    MOORBIN=~/.moor/bin
fi

# $HOME for containerized app
if [ -z $MOORHOME ]; then
    MOORHOME=.moor/home
fi
mkdir -p $MOORBIN
mkdir -p ~/$MOORHOME

# workdir inside a container
WORKDIR=/workdir

HELP_HEADER_INSTALL='Add command from docker image to the host'
HELP_HEADER_LIST='Print currently installed launchers'
HELP_HEADER_UPDATE='Update docker image of installed command'
HELP_HEADER_REMOVE='Remove installed host command and corresponding docker image'
HELP_HEADER_SELFUPDATE='Download latest version of moor'

function print_help_main {
    echo
    echo 'Usage: moor COMMAND'
    echo
    echo 'Install apps from docker images to the host'
    echo
    echo 'Commands:'
    echo '  install      '$HELP_HEADER_INSTALL
    echo '  list         '$HELP_HEADER_LIST
    echo '  update       '$HELP_HEADER_UPDATE
    echo '  remove       '$HELP_HEADER_REMOVE
    echo '  selfupdate   '$HELP_HEADER_SELFUPDATE
    echo
    echo 'Environment:'
    echo '  MOORBIN      Where to put generated launchers'
    echo '               (default: ~/.moor/bin)'
    echo '  MOORHOME     $HOME for containerized app. Not a full path, but relative'
    echo '               to $HOME of the user who runs installed command'
    echo '               (default: .moor/home)'
    echo
    echo "If no command is specified 'install' is used"
    echo
    echo "Run 'moor COMMAND --help' for more information on a command"
    exit 0
}

function print_help_install {
    echo
    echo 'Usage: moor [i|in|install] image[:tag|@digest] [host_cmd [container_cmd]]'
    echo '  image                Docker image which contains required command'
    echo '  host_cmd             How to name the command on the host'
    echo '  container_cmd        Command to run in the container'
    echo '                       (by default equals to host_cmd)'
    echo
    echo $HELP_HEADER_INSTALL
    echo
    echo "If only image name is specified then '<image>-shell' launcher is created,"
    echo "which runs 'bash' in the container"
    echo
    echo 'Options:'
    echo '  --chown              Chown volumes to root:root before executing command and'
    echo '                       to <your user>:<your group> after command has finished'
    echo '  --keep-home          Do not mount MOORHOME, leave container HOME as is'
    echo '  --keep-user          Do not run as your $USER, but as configured in the container'
    echo '  --pipe               Allow installed command to accept input through pipe'
    echo '                       (removes --tty option of docker run)'
    echo '  --privileged         Give extended privileges to this container'
    echo '                       (docker run --privileged)'
    echo '  --pull               Pull image at install time (by default - at first launch)'
    echo '  --reset-entrypoint   Reset (clear) entrypoint'
    exit 0
}

function print_help_list {
    echo
    echo 'Usage: moor l|ls|list'
    echo
    echo $HELP_HEADER_LIST
    exit 0
}

function print_help_update {
    echo
    echo 'Usage: moor u|up|update host_cmd'
    echo '  host_cmd   Command, which image to update'
    echo
    echo $HELP_HEADER_UPDATE
    echo
    echo 'Options:'
    echo '  --all      Update images of all installed launchers'
    exit 0
}

function print_help_remove {
    echo
    echo 'Usage: moor r|rm|remove host_cmd'
    echo '  host_cmd   Command to remove'
    echo
    echo $HELP_HEADER_REMOVE
    exit 0
}

function print_help_selfupdate {
    echo
    echo 'Usage: moor su|selfupdate [branch]'
    echo '  branch   Actual git repository branch to update to'
    echo
    echo $HELP_HEADER_SELFUPDATE
    echo
    echo 'New version will be put into MOORBIN.'
    exit 0
}

function check_help {
    ARG=$1
    COMMAND=$2
    case $ARG in
        h|-h|--help|help) print_help_$COMMAND;;
    esac
}

function check_option {
    option=$1; shift
    default=$1; shift
    value=$1; shift
    for arg in $@; do
        if [ $arg = $option ]; then
            echo $value
            return
        fi
    done
    echo $default
}

function get_image_splitter {
    image_full=$1
    case "$image_full" in
        *:*@*) echo both ;;
        *@*:*) echo both ;;
        *@*) echo @ ;;
        *) echo : ;;
    esac
}

function get_exe {
    chown=$1
    case "$chown" in
        yes) printf '\
chown 0:0 -R $WORKDIR ;\
chown 0:0 -R $HOME ;\
$CMD $@ ;\
chown $HOSTUID:$HOSTGID -R $WORKDIR ;\
chown $HOSTUID:$HOSTGID -R $HOME' ;;
        *) printf '$CMD $@' ;;
    esac
}

function install {
    check_help $1 'install'

    DEFAULT_TTY='--tty'
    DEFAULT_PRIVILEGED=
    DEFAULT_PULL='no'
    DEFAULT_ENTRYPOINT=
    DEFAULT_ENV_VOL_HOME='--env HOME=$HOME --volume "$HOME/$MOORHOME":"$HOME"'
    DEFAULT_CHOWN=
    DEFAULT_OPTION_USER='--user $(id -u $USER):$(id -g $USER)'

    TTY=$(check_option '--pipe' "$DEFAULT_TTY" '' $@)
    PRIVILEGED=$(check_option '--privileged' "$DEFAULT_PRIVILEGED" '--privileged' $@)
    PULL=$(check_option '--pull' "$DEFAULT_PULL" 'yes' $@)
    ENTRYPOINT=$(check_option '--reset-entrypoint' "$DEFAULT_ENTRYPOINT" '--entrypoint=' $@)
    ENV_VOL_HOME=$(check_option '--keep-home' "$DEFAULT_ENV_VOL_HOME" '' $@)
    CHOWN=$(check_option '--chown' "$DEFAULT_CHOWN" 'yes' $@)
    OPTION_USER=$(check_option '--keep-user' "$DEFAULT_OPTION_USER" '' $@)

    if [ "$TTY" != "$DEFAULT_TTY" ]; then shift; fi
    if [ "$PRIVILEGED" != "$DEFAULT_PRIVILEGED" ]; then shift; fi
    if [ "$PULL" != "$DEFAULT_PULL" ]; then shift; fi
    if [ "$ENTRYPOINT" != "$DEFAULT_ENTRYPOINT" ]; then shift; fi
    if [ "$ENV_VOL_HOME" != "$DEFAULT_ENV_VOL_HOME" ]; then shift; fi
    if [ "$CHOWN" != "$DEFAULT_CHOWN" ]; then shift; fi
    if [ "$OPTION_USER" != "$DEFAULT_OPTION_USER" ]; then shift; fi

    IMAGEFULL=$1

    splitter=$(get_image_splitter $IMAGEFULL)
    if [ $splitter = both ]; then
        echo "Both ':' and '@' are not allowed"
        exit 1
    fi

    if [ $# -eq 1 ]; then
    # single argument - image, so creating shell launcher
        # split IMAGEFULL by ':' or '@' to get IMAGE
        IFS=$splitter read -ra IMAGEFULL_SPLIT <<< "$IMAGEFULL"
        NAME=${IMAGEFULL_SPLIT[0]}-shell
        # replace '/' with '-'
        NAME=$(tr -s / - <<< "$NAME")
        CMD="bash"
    elif [ $# -eq 2 ] || [ $# -eq 3 ]; then
    # there are 2 required arguments: image, host_cmd
    # and optional container_cmd, so there may be 2 or 3 args
        NAME=$2
        # if no container_cmd specified then it equals to host_cmd
        [ -z $3 ] \
            && CMD=$2 \
            || CMD=$3
    else
        print_help_install
    fi
    
    if [ $NAME = 'moor' ]; then
        echo "Won't install, as this will overwrite me"
        exit 1
    fi

    # if this is linux then use 'host' network
    case "$(uname -s)" in
        Linux*) NETWORK='--network=host' ;;
        *)      NETWORK='' ;;
    esac

    case "$CHOWN" in
        yes) EXE='\
chown 0:0 -R $WORKDIR ;\
chown 0:0 -R $HOME ;\
$CMD $@ ;\
chown $HOSTUID:$HOSTGID -R $WORKDIR ;\
chown $HOSTUID:$HOSTGID -R $HOME' ;;
        *) EXE='$CMD $@' ;;
    esac

    # EXE=$(get_exe $CHOWN)

    printf \
'# Generated with moor

IMAGEFULL='$IMAGEFULL'
CMD='$CMD'
WORKDIR='$WORKDIR'
MOORHOME=$HOME/'$MOORHOME'
HOSTUID=$(id -u $USER)
HOSTGID=$(id -g $USER)

EXE="'"$EXE"'"

docker run \
--interactive \
'$TTY' \
--rm \
'$PRIVILEGED' \
'$ENTRYPOINT' \
--ipc=host \
'$NETWORK' \
--workdir $WORKDIR \
--volume "$PWD":$WORKDIR \
'"$ENV_VOL_HOME"' \
'"$OPTION_USER"' \
$P \
$MRUN \
$IMAGEFULL \
sh -c "$EXE"

' > $MOORBIN/$NAME-tmp && \
    grep -v '^\ \\$' $MOORBIN/$NAME-tmp > $MOORBIN/$NAME && \
    rm $MOORBIN/$NAME-tmp && \
    chmod +x $MOORBIN/$NAME 
    # grep removes 'blank' lines, which contain only ' \'

    if [ $PULL = yes ]; then
        docker pull $IMAGEFULL
    fi
}

function list {
    check_help $1 'list'
    if [ ! $# -eq 0 ]; then
            print_help_list
        fi
    launchers=$(ls $MOORBIN)
    for launcher in $launchers; do
        if [ $launcher != 'moor' ]; then
            echo $launcher
        fi
    done
}

function get_image_full {
    # host cmd name
    name=$1
    file=$MOORBIN/$name
    # find string containing image spec
    image_full_spec=`grep IMAGEFULL= $file`
    # parse image spec string to get image
    IFS='=' read -ra image_full_split <<< "$image_full_spec"
    image_full=${image_full_split[1]}
    echo $image_full
}

function update {
    check_help $1 'update'

    DEFAULT_ALL='no'
    ALL=$(check_option --all "$DEFAULT_ALL" 'yes' $@)
    if [ "$ALL" != "$DEFAULT_ALL" ]; then shift; fi

    if [ "$ALL" = 'no' ]; then
        if [ ! $# -eq 1 ]; then
            print_help_update
        fi
        name=$1
        echo Updating $name ...
        image=$(get_image_full $name)
        docker pull $image
    elif [ "$ALL" = 'yes' ]; then
        if [ ! $# -eq 0 ]; then
            print_help_update
        fi
        for name in $(list); do
            echo Updating $name ...
            image=$(get_image_full $name)
            docker pull $image
        done
    fi
}

function remove {
    check_help $1 'remove'
    if [ ! $# -eq 1 ]; then
        print_help_remove
    fi
    name=$1
    image=$(get_image_full $name)
    rm $MOORBIN/$name
    docker rmi $image
}

function selfupdate {
    check_help $1 'selfupdate'
    # may be one optional argument
    if [ ! $# -le 1 ]; then
        print_help_selfupdate
    fi
    # if no branch specified then using 'master'
    [ -z $1 ] \
        && BRANCH=master \
        || BRANCH=$1
    DOWNLOAD_URL=https://raw.githubusercontent.com/guziks/moor/$BRANCH/moor
    curl -fsSL -o $MOORBIN/moor-tmp $DOWNLOAD_URL && \
    chmod +x $MOORBIN/moor-tmp && \
    mv $MOORBIN/moor-tmp $MOORBIN/moor
}

check_help $1 'main'
case $1 in
    i|in|install) shift; install $@;;
    l|ls|list) shift; list $@;;
    u|up|update) shift; update $@;;
    r|rm|remove|uninstall) shift; remove $@;;
      su|selfupdate) shift; selfupdate $@;;
    *) install $@;;
esac
