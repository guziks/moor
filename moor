#!/usr/bin/env bash

# where to put generated launchers
if [ -z $MOORBIN ]; then
    MOORBIN=~/.moor/bin
fi

# $HOME for containerized app
if [ -z $MOORHOME ]; then
    MOORHOME=~/.moor/home
fi
mkdir -p $MOORBIN
mkdir -p $MOORHOME

# workdir inside a container
WORKDIR=/workdir

HELP_HEADER_INSTALL='Add command from docker image to the host'
HELP_HEADER_UPDATE='Update docker image of installed command'
HELP_HEADER_REMOVE='Remove installed host command and corresponding docker image'
HELP_HEADER_SELFUPDATE='Download latest version of moor'

function print_help_main {
    echo
    echo 'Usage: moor COMMAND'
    echo
    echo 'Install apps from docker images to the host'
    echo
    echo 'Commands:'
    echo '  install      '$HELP_HEADER_INSTALL
    echo '  update       '$HELP_HEADER_UPDATE
    echo '  remove       '$HELP_HEADER_REMOVE
    echo '  selfupdate   '$HELP_HEADER_SELFUPDATE
    echo
    echo 'Environment:'
    echo '  MOORBIN      Where to put generated launchers'
    echo '               (default: ~/.moor/bin)'
    echo '  MOORHOME     $HOME for containerized app'
    echo '               (default: ~/.moor/home)'
    echo
    echo "If no command is specified 'install' is used."
    echo
    echo "Run 'moor COMMAND --help' for more information on a command."
    exit 0
}

function print_help_install {
    echo
    echo 'Usage: moor [i|in|install] image[:tag|@digest] host_cmd container_cmd'
    echo '  image           Docker image which contains required command'
    echo '  host_cmd        How to name the command on the host'
    echo '  container_cmd   Command to run in the container'
    echo
    echo $HELP_HEADER_INSTALL
    echo
    echo 'Options:'
    echo '  --pull          Pull image at install time (by default - at first launch)'
    echo '  --pipe          Allow installed command to accept input through pipe'
    echo '                  (removes --tty option of docker run)'
    echo '  --privileged    Give extended privileges to this container'
    echo '                  (docker run --privileged)'
    exit 0
}

function print_help_update {
    echo
    echo 'Usage: moor u|up|update host_cmd'
    echo '  host_cmd   Command, which image to update'
    echo
    echo $HELP_HEADER_UPDATE
    exit 0
}

function print_help_remove {
    echo
    echo 'Usage: moor r|rm|remove host_cmd'
    echo '  host_cmd   Command to remove'
    echo
    echo $HELP_HEADER_REMOVE
    exit 0
}

function print_help_selfupdate {
    echo
    echo 'Usage: moor selfupdate'
    echo
    echo $HELP_HEADER_SELFUPDATE
    echo
    echo 'New version will be put into MOORBIN.'
    exit 0
}

function check_help {
    ARG=$1
    COMMAND=$2
    case $ARG in
        h|-h|--help|help) print_help_$COMMAND;;
    esac
}

function check_option {
    option=$1; shift
    default=$1; shift
    value=$1; shift
    for arg in $@; do
        if [ $arg = $option ]; then
            echo $value
            return
        fi
    done
    echo $default
}

function install {
    check_help $1 "install"

    DEFAULT_TTY=-t
    DEFAULT_PRIVILEGED=
    DEFAULT_PULL=no

    TTY=$(check_option --pipe "$DEFAULT_TTY" " " $@)
    PRIVILEGED=$(check_option --privileged "$DEFAULT_PRIVILEGED" --privileged $@)
    PULL=$(check_option --pull "$DEFAULT_PULL" yes $@)

    if [ "$TTY" != "$DEFAULT_TTY" ]; then shift; fi
    if [ "$PRIVILEGED" != "$DEFAULT_PRIVILEGED" ]; then shift; fi
    if [ "$PULL" != "$DEFAULT_PULL" ]; then shift; fi

    # there are 2 required arguments: image, host_cmd
    # and optional container_cmd, so there may be 2 or 3 args
    if [ $# -lt 2 ] || [ $# -gt 3 ]; then
        print_help_install
    fi

    IMAGEFULL=$1
    NAME=$2
    CMD=$3

    # if this is linux then use 'host' network
    case "$(uname -s)" in
        Linux*) NETWORK="--network=host" ;;
        *)      NETWORK="" ;;
    esac

    printf \
'# Generated with moor

IMAGEFULL='$IMAGEFULL'
CMD='$CMD'
WORKDIR='$WORKDIR'
MOORHOME='$MOORHOME'

docker run -i '$TTY' --rm '$PRIVILEGED' '$NETWORK' \
$P \
--ipc=host \
--workdir $WORKDIR \
--volume "$PWD":$WORKDIR \
--volume "$MOORHOME":"$HOME" \
--user $(id -u $USER):$(id -g $USER) \
--env HOME=$HOME \
$IMAGEFULL \
$CMD \
"$@"

' > $MOORBIN/$NAME && chmod +x $MOORBIN/$NAME

    if [ $PULL = yes ]; then
        docker pull $IMAGEFULL
    fi
}

function get_image_full {
    # host cmd name
    name=$1
    file=$MOORBIN/$name
    # find string containing image spec
    image_full_spec=`grep IMAGEFULL= $file`
    # parse image spec string to get image
    IFS='=' read -ra image_full_split <<< "$image_full_spec"
    image_full=${image_full_split[1]}
    echo $image_full
}

function update {
    check_help $1 "update"
    if [ ! $# -eq 1 ]; then
        print_help_update
    fi
    name=$1
    image=$(get_image_full $name)
    docker pull $image
}

function remove {
    check_help $1 "remove"
    if [ ! $# -eq 1 ]; then
        print_help_remove
    fi
    name=$1
    image=$(get_image_full $name)
    rm $MOORBIN/$name
    docker rmi $image
}

function selfupdate {
    check_help $1 "selfupdate"
    # no arguments accepted
    if [ ! $# -eq 0 ]; then
        print_help_selfupdate
    fi
    curl -fsSL -o $MOORBIN/moor https://raw.githubusercontent.com/guziks/moor/master/moor && \
    chmod +x $MOORBIN/moor
}

check_help $1 "main"
case $1 in
    i|in|install) shift; install $@;;
    u|up|update) shift; update $@;;
    r|rm|remove|uninstall) shift; remove $@;;
      su|selfupdate) shift; selfupdate $@;;
    *) install $@;;
esac
